/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Paul
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class RplUserLogin : TBase
  {
    private long _userSerial;
    private string _pw;
    private string _id;
    private ResultUserLogin _result;

    public long UserSerial
    {
      get
      {
        return _userSerial;
      }
      set
      {
        __isset.userSerial = true;
        this._userSerial = value;
      }
    }

    public string Pw
    {
      get
      {
        return _pw;
      }
      set
      {
        __isset.pw = true;
        this._pw = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ResultUserLogin"/>
    /// </summary>
    public ResultUserLogin Result
    {
      get
      {
        return _result;
      }
      set
      {
        __isset.result = true;
        this._result = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userSerial;
      public bool pw;
      public bool id;
      public bool result;
    }

    public RplUserLogin() {
      this._userSerial = 0;
      this.__isset.userSerial = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              UserSerial = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Pw = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Result = (ResultUserLogin)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("RplUserLogin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.userSerial) {
        field.Name = "userSerial";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UserSerial);
        oprot.WriteFieldEnd();
      }
      if (Pw != null && __isset.pw) {
        field.Name = "pw";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Pw);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.result) {
        field.Name = "result";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Result);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("RplUserLogin(");
      bool __first = true;
      if (__isset.userSerial) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserSerial: ");
        __sb.Append(UserSerial);
      }
      if (Pw != null && __isset.pw) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Pw: ");
        __sb.Append(Pw);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      if (__isset.result) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Result: ");
        __sb.Append(Result);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
